{"version":3,"sources":["index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","boxId","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","gridFull","push","key","style","Buttons","handleSelect","evt","gridSize","playButton","pauseButton","clear","slow","fast","seed","title","onSelect","variant","Item","eventKey","Main","gridCopy","arrayClone","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","grid","Array","fill","map","generation","size","g","g2","count","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6154cef6.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ButtonToolbar, Dropdown, DropdownButton } from 'react-bootstrap';\n\n// box class\nclass Box extends React.Component {\n\t// select function to determine if box will be on or off\n\tselectBox = () => {\n\t\tthis.props.selectBox(this.props.row, this.props.col);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.props.boxClass} id={this.props.boxId} row={this.props.row} col={this.props.col} onClick={this.selectBox} />\n\t\t);\n\t}\n\n}\n\nclass Grid extends React.Component {\n\trender() {\n\t\t// set the width of the wrapper\n\t\tconst width = (this.props.cols * 14);\n\t\t// empty arr for box data\n\t\tvar rowsArr = [];\n\n\t\t// empty box\n\t\tvar boxClass = \" \";\n\n\t\tfor (var i = 0; i < this.props.rows; i++) {\n\t\t\tfor (var j = 0; j < this.props.cols; j++) {\n\t\t\t\t// set boxId\n\t\t\t\tlet boxId = i + \"_\" + j;\n\t\t\t\t// set boxClass\n\t\t\t\tboxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n\t\t\t\t// push item to rowsArr\n\t\t\t\trowsArr.push(\n\t\t\t\t\t<Box boxClass={boxClass} key={boxId} boxId={boxId} row={i} col={j} selectBox={this.props.selectBox} />\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t// display the grid\n\t\t\t<div className=\"grid\" style={{width: width}}> {rowsArr} </div>\n\t\t);\n\t}\n}\n\nclass Buttons extends React.Component {\n\t// update grid size based on user\n\thandleSelect = (evt) => {\n\t\tthis.props.gridSize(evt);\n\t}\n\n\t// display buttons and dropdown using react-bootstrap\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"center\">\n\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.playButton}>\n\t\t\t\t\t\tPlay\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.pauseButton}>\n\t\t\t\t\t  Pause\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.clear}>\n\t\t\t\t\t  Clear\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.slow}>\n\t\t\t\t\t  Slow\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.fast}>\n\t\t\t\t\t  Fast\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-default\" onClick={this.props.seed}>\n\t\t\t\t\t  Seed\n\t\t\t\t\t</button>\n\t\t\t\t\t\t<DropdownButton\n\t\t\t\t\t\t\ttitle=\"Grid Size\"\n\t\t\t\t\t\t\tid=\"size-menu\"\n\t\t\t\t\t\t\tonSelect={this.handleSelect}\n\t\t\t\t\t\t\tvariant=\"default\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Dropdown.Item eventKey=\"1\">20x10</Dropdown.Item>\n\t\t\t\t\t\t\t<Dropdown.Item eventKey=\"2\">50x30</Dropdown.Item>\n\t\t\t\t\t\t\t<Dropdown.Item eventKey=\"3\">70x50</Dropdown.Item>\n\t\t\t\t\t\t</DropdownButton>\n\t\t\t\t</ButtonToolbar>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Main extends React.Component {\n\t// 1: CONSTRUCTOR\n\t// 2: SELECT BOX\n\t// 3: SEED\n\t// 4: PLAY BUTTON\n\t// 5: PAUSE BUTTON\n\t// 6: SLOW DOWN THE GAME\n\t// 7: SPEED UP THE GAME\n\t// 8: CLEAR THE BOARD\n\t// 9: ADJUST THE GRID SIZE\n\t// 10:PLAY THE GAME\n\t// 11: COMPONENT MOUNTED\n\t// 12: RENDER\n\n\t// 1: CONSTRUCTOR\n\tconstructor() {\n\t\tsuper();\n\t\t// game speed\n\t\tthis.speed = 100;\n\t\t// game rows\n\t\tthis.rows = 30;\n\t\t// colums\n\t\tthis.cols = 50;\n\n\t\t// set the state of Main Component\n\t\tthis.state = {\n\t\t\tgeneration: 0,\n\t\t\tgridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n\t\t}\n\t}\n\t// 2: SELECT BOX\n\tselectBox = (row, col) => {\n\t\t// make a copy of the grid\n\t\tlet gridCopy = arrayClone(this.state.gridFull);\n\t\t// set gridCopy[row][col] to value of !gridCopy[row][col];\n\t\tgridCopy[row][col] = !gridCopy[row][col];\n\t\t// update the state of gridFull\n\t\tthis.setState({\n\t\t\tgridFull: gridCopy\n\t\t});\n\t}\n\n\t// 3: SEED\n\tseed = () => {\n\t\t// store the cloned copy\n\t\tlet gridCopy = arrayClone(this.state.gridFull);\n\t\tfor (var i = 0; i < this.rows; i++) {\n\t\t\tfor (var j = 0; j < this.cols; j++) {\n\t\t\t\t// each box has a 1/4 chance of being seeding\n\t\t\t\tif(Math.floor(Math.random() * 4) === 1) {\n\t\t\t\t\t// if true updatde box value to true\n\t\t\t\t\tgridCopy[i][j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// update the state of the grid\n\t\tthis.setState({\n\t\t\tgridFull: gridCopy\n\t\t});\n\t}\n\n\t// 4: PLAY BUTTON\n\tplayButton = () => {\n\t\tclearInterval(this.intervalId);\n\t\tthis.intervalId = setInterval(this.play, this.speed);\n\t}\n\n\t// 5: PAUSE BUTTON\n\tpauseButton = () => {\n\t\tclearInterval(this.intervalId);\n\t}\n\n\t// 6: SLOW DOWN THE GAME\n\tslow = () => {\n\t\tthis.speed = 1000;\n\t\tthis.playButton();\n\t}\n\n\t\n\tfast = () => {\n\t\tthis.speed = 100;\n\t\tthis.playButton();\n\t}\n\n\t// 8: CLEAR THE BOARD\n\tclear = () => {\n\t\t// update each box to be \"box off\"\n\t\tvar grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n\t\t// update the state\n\t\tthis.setState({\n\t\t\tgridFull: grid,\n\t\t\tgeneration: 0\n\t\t});\n\t}\n\t\n\t// 9: ADJUST THE GRID SIZE\n\tgridSize = (size) => {\n\t\t// modifiy grid size based on what the user selects \n\t\tswitch (size) {\n\t\t\tcase \"1\": \n\t\t\t\tthis.cols = 20;\n\t\t\t\tthis.rows = 10;\n\t\t\tbreak;\n\t\t\tcase \"2\": \n\t\t\t\tthis.cols = 50;\n\t\t\t\tthis.rows = 30;\n\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tthis.cols = 70;\n\t\t\t\tthis.rows = 50;\n\t\t}\n\t\tthis.clear();\n\t}\n\t\n\t// 10:PLAY THE GAME\n\tplay = () => {\n\t\t// create 2 copies of the grid so the 2nd can be modified based on the first\n\t\tlet g = this.state.gridFull;\n\t\tlet g2 = arrayClone(this.state.gridFull);\n\n\t\t// logic for game rules:\n\t\t// 1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n\t\t// 2. Any live cell with two or three live neighbours lives on to the next generation.\n\t\t// 3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n\t\t// 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\t\tfor (let i = 0; i < this.rows; i++) {\n\t\t  for (let j = 0; j < this.cols; j++) {\n\t\t    let count = 0;\n\t\t    if (i > 0) if (g[i - 1][j]) count++;\n\t\t    if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n\t\t    if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n\t\t    if (j < this.cols - 1) if (g[i][j + 1]) count++;\n\t\t    if (j > 0) if (g[i][j - 1]) count++;\n\t\t    if (i < this.rows - 1) if (g[i + 1][j]) count++;\n\t\t    if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n\t\t    if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n\t\t    if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n\t\t    if (!g[i][j] && count === 3) g2[i][j] = true;\n\t\t  }\n\t\t}\n\t\t// update state data\n\t\tthis.setState({\n\t\t  gridFull: g2,\n\t\t  generation: this.state.generation + 1\n\t\t});\n\n\t}\n\n\t// 11: COMPONENT MOUNTED\n\tcomponentDidMount() {\n\t\t// seed the board on start\n\t\tthis.seed();\n\t}\n\n\t// 12: RENDER\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>The Game of Life</h1>\n\t\t\t\t<Buttons playButton={this.playButton} pauseButton={this.pauseButton} slow={this.slow} fast={this.fast} clear={this.clear} seed={this.seed} gridSize={this.gridSize} />\n\t\t\t\t<Grid gridFull={this.state.gridFull} rows={this.rows} cols={this.cols} selectBox={this.selectBox} />\n\t\t\t\t<h2>Generations: {this.state.generation}</h2>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// clone an array\nfunction arrayClone(arr) {\n\treturn JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}